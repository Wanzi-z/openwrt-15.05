--- a/mt7921/mac.c
+++ b/mt7921/mac.c
@@ -1045,8 +1045,7 @@
 
 static void
 mt7921_txwi_free(struct mt7921_dev *dev, struct mt76_txwi_cache *t,
-		 struct ieee80211_sta *sta, bool clear_status,
-		 struct list_head *free_list)
+		 struct ieee80211_sta *sta, bool clear_status)
 {
 	struct mt76_dev *mdev = &dev->mt76;
 	__le32 *txwi;
@@ -1068,7 +1067,7 @@
 		wcid_idx = FIELD_GET(MT_TXD1_WLAN_IDX, le32_to_cpu(txwi[1]));
 	}
 
-	__mt76_tx_complete_skb(mdev, wcid_idx, t->skb, free_list);
+	mt76_tx_complete_skb(mdev, wcid_idx, t->skb);
 
 out:
 	t->skb = NULL;
@@ -1082,8 +1081,6 @@
 	struct mt76_dev *mdev = &dev->mt76;
 	struct mt76_txwi_cache *txwi;
 	struct ieee80211_sta *sta = NULL;
-	LIST_HEAD(free_list);
-	struct sk_buff *tmp;
 	bool wake = false;
 	u8 i, count;
 
@@ -1132,19 +1129,12 @@
 		if (!txwi)
 			continue;
 
-		mt7921_txwi_free(dev, txwi, sta, stat, &free_list);
+		mt7921_txwi_free(dev, txwi, sta, stat);
 	}
 
 	if (wake)
 		mt76_set_tx_blocked(&dev->mt76, false);
 
-	napi_consume_skb(skb, 1);
-
-	list_for_each_entry_safe(skb, tmp, &free_list, list) {
-		skb_list_del_init(skb);
-		napi_consume_skb(skb, 1);
-	}
-
 	mt7921_mac_sta_poll(dev);
 	mt76_worker_schedule(&dev->mt76.tx_worker);
 }
@@ -1494,7 +1484,7 @@
 
 	spin_lock_bh(&dev->mt76.token_lock);
 	idr_for_each_entry(&dev->mt76.token, txwi, id) {
-		mt7921_txwi_free(dev, txwi, NULL, false, NULL);
+		mt7921_txwi_free(dev, txwi, NULL, false);
 		dev->mt76.token_count--;
 	}
 	spin_unlock_bh(&dev->mt76.token_lock);
